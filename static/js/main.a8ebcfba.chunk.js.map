{"version":3,"sources":["assets/thumbnails/home.jpg","assets/thumbnails/about.jpg","assets/thumbnails/trees.jpg","assets/thumbnails/sustainability.jpg","assets/WebHeroClip.mp4","components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gallery","className","to","src","home_thumbnail","about_thumbnail","trees_thumbnail","sustainability_thumbnail","Splash","loop","autoPlay","splashVideo","type","About","Trees","Sustainability","App","basename","process","component","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,iBCA3CD,EAAOC,QAAU,IAA0B,yC,iUCgC5BC,MAtBf,WACE,OACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKD,UAAU,qBAAqBE,IAAKC,OAE3C,kBAAC,IAAD,CAAMF,GAAG,UACP,yBAAKD,UAAU,qBAAqBE,IAAKE,OAE3C,kBAAC,IAAD,CAAMH,GAAG,UACP,yBAAKD,UAAU,qBAAqBE,IAAKG,OAE3C,kBAAC,IAAD,CAAMJ,GAAG,mBACP,yBACED,UAAU,qBACVE,IAAKI,S,yBCdf,SAASC,IACP,OACE,yBAAKP,UAAU,UACb,yBAAKA,UAAU,aACb,2BAAOA,UAAU,QAAQQ,MAAI,EAACC,UAAQ,GACpC,4BAAQP,IAAKQ,IAAaC,KAAK,iBAOzC,SAASC,IACP,OACE,yBAAKZ,UAAU,cACb,mEAKN,SAASa,IACP,OACE,yBAAKb,UAAU,cACb,uDAKN,SAASc,IACP,OACE,yBAAKd,UAAU,uBACb,gEAqBSe,MAhBf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,IAAD,CAAegB,SAAUC,YACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAWX,EAAQY,OAAK,EAACC,KAAK,MACrC,kBAAC,IAAD,CAAOF,UAAWN,EAAOQ,KAAK,WAC9B,kBAAC,IAAD,CAAOF,UAAWL,EAAOO,KAAK,WAC9B,kBAAC,IAAD,CAAOF,UAAWJ,EAAgBM,KAAK,qBAEzC,kBAAC,EAAD,SC7CYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8ebcfba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.7eda2299.jpg\";","module.exports = __webpack_public_path__ + \"static/media/about.75ca552d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/trees.a472d4f9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sustainability.5a3a155a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/WebHeroClip.9f0ce163.mp4\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport home_thumbnail from \"../assets/thumbnails/home.jpg\";\nimport about_thumbnail from \"../assets/thumbnails/about.jpg\";\nimport trees_thumbnail from \"../assets/thumbnails/trees.jpg\";\nimport sustainability_thumbnail from \"../assets/thumbnails/sustainability.jpg\";\n\nimport \"./Gallery.css\";\n\nfunction Gallery() {\n  return (\n    <div className=\"Gallery\">\n      <Link to=\"/\">\n        <img className=\"Gallery__thumbnail\" src={home_thumbnail}></img>\n      </Link>\n      <Link to=\"/About\">\n        <img className=\"Gallery__thumbnail\" src={about_thumbnail}></img>\n      </Link>\n      <Link to=\"/Trees\">\n        <img className=\"Gallery__thumbnail\" src={trees_thumbnail}></img>\n      </Link>\n      <Link to=\"/Sustainability\">\n        <img\n          className=\"Gallery__thumbnail\"\n          src={sustainability_thumbnail}\n        ></img>\n      </Link>\n    </div>\n  );\n}\n\nexport default Gallery;\n","import React from \"react\";\nimport { BrowserRouter, Link, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./components/Splash.css\";\nimport \"./components/Video.css\";\nimport Gallery from \"./components/Gallery\"\nimport \"./components/Gallery.css\";\nimport \"./components/Page.css\";\n\nimport splashVideo from \"./assets/WebHeroClip.mp4\";\n\nfunction Splash() {\n  return (\n    <div className=\"Splash\">\n      <div className=\"Video-box\">\n        <video className=\"Video\" loop autoPlay>\n          <source src={splashVideo} type=\"video/mp4\"></source>\n        </video>\n      </div>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div className=\"About Page\">\n      <h1>This is the About and History page</h1>\n    </div>\n  );\n}\n\nfunction Trees() {\n  return (\n    <div className=\"Trees Page\">\n      <h1>This is the Trees page</h1>\n    </div>\n  );\n}\n\nfunction Sustainability() {\n  return (\n    <div className=\"Sustainibility Page\">\n      <h1>This is the Sustainability page</h1>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route component={Splash} exact path=\"/\"></Route>\n          <Route component={About} path=\"/About\"></Route>\n          <Route component={Trees} path=\"/Trees\"></Route>\n          <Route component={Sustainability} path=\"/Sustainability\"></Route>\n        </Switch>\n        <Gallery></Gallery>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}